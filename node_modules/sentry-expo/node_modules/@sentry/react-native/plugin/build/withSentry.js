"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withSentry = exports.getSentryProperties = void 0;
const config_plugins_1 = require("expo/config-plugins");
const utils_1 = require("./utils");
const withSentryAndroid_1 = require("./withSentryAndroid");
const withSentryIOS_1 = require("./withSentryIOS");
const withSentryPlugin = (config, props) => {
    const sentryProperties = getSentryProperties(props);
    let cfg = config;
    if (sentryProperties !== null) {
        try {
            cfg = (0, withSentryAndroid_1.withSentryAndroid)(cfg, sentryProperties);
        }
        catch (e) {
            config_plugins_1.WarningAggregator.addWarningAndroid(utils_1.SDK_PACKAGE_NAME, `There was a problem configuring sentry-expo in your native Android project: ${e}`);
        }
        try {
            cfg = (0, withSentryIOS_1.withSentryIOS)(cfg, sentryProperties);
        }
        catch (e) {
            config_plugins_1.WarningAggregator.addWarningIOS(utils_1.SDK_PACKAGE_NAME, `There was a problem configuring sentry-expo in your native iOS project: ${e}`);
        }
    }
    return cfg;
};
const missingAuthTokenMessage = '# auth.token is configured through SENTRY_AUTH_TOKEN environment variable';
const missingProjectMessage = '# no project found, falling back to SENTRY_PROJECT environment variable';
const missingOrgMessage = '# no org found, falling back to SENTRY_ORG environment variable';
function getSentryProperties(props) {
    const { organization, project, authToken, url = 'https://sentry.io/' } = props ?? {};
    // eslint-disable-next-line no-prototype-builtins
    const missingProperties = ['organization', 'project'].filter(each => !props?.hasOwnProperty(each));
    if (missingProperties.length) {
        const warningMessage = `Missing Sentry configuration properties: ${missingProperties.join(', ')} in config plugin. Builds will fall back to environment variables. See: https://docs.sentry.io/platforms/react-native/manual-setup/.`;
        config_plugins_1.WarningAggregator.addWarningAndroid(utils_1.SDK_PACKAGE_NAME, warningMessage);
        config_plugins_1.WarningAggregator.addWarningIOS(utils_1.SDK_PACKAGE_NAME, warningMessage);
    }
    return `defaults.url=${url}
${organization ? `defaults.org=${organization}` : missingOrgMessage}
${project ? `defaults.project=${project}` : missingProjectMessage}
${authToken
        ? `# Configure this value through \`SENTRY_AUTH_TOKEN\` environment variable instead. See: https://docs.sentry.io/platforms/react-native/manual-setup/\nauth.token=${authToken}`
        : missingAuthTokenMessage}
`;
}
exports.getSentryProperties = getSentryProperties;
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
const withSentry = (0, config_plugins_1.createRunOncePlugin)(withSentryPlugin, utils_1.sdkPackage.name, utils_1.sdkPackage.version);
exports.withSentry = withSentry;
